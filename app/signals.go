/*
 * signals.go --- Signal handler.
 *
 * Copyright (c) 2022 Paul Ward <asmodai@gmail.com>
 *
 * Author:     Paul Ward <asmodai@gmail.com>
 * Maintainer: Paul Ward <asmodai@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

package app

import (
	"os"
	"os/signal"
	"syscall"
)

// Install signal handler.
func (app *Application) installSignals() {
	sigs := make(chan os.Signal, 1)

	// We don't care for the following signals:
	signal.Ignore(syscall.SIGURG)

	// Notify when a signal we care for is received.
	signal.Notify(sigs)

	go func() {
		for {
			sig := <-sigs

			switch sig {
			case syscall.SIGINT, syscall.SIGKILL, syscall.SIGTERM:
				// Handle termination.
				app.logger.Info(
					"Received signal",
					"signal", sig.String(),
				)
				app.Terminate()
				return

			case syscall.SIGHUP:
				// Handle SIGHUP.
				app.logger.Info(
					"Received signal",
					"signal", sig.String(),
				)
				app.OnHUP(app)

			case syscall.SIGWINCH:
				// Handle WINCH.
				// Note: Do not bother logging this one.
				app.OnWINCH(app)

			case syscall.SIGUSR1:
				// Handle user-defined signal #1.
				app.logger.Info(
					"Received signal",
					"signal", sig.String(),
				)
				app.OnUSR1(app)

			case syscall.SIGUSR2:
				// Handle user-defined signal #2.
				app.logger.Info(
					"Received signal",
					"signal", sig.String(),
				)
				app.OnUSR2(app)

			default:
				if sig == syscall.SIGURG {
					// This signal is noise, generated by the Go runtime.
					break
				}
				app.logger.Info(
					"Unhandled signal",
					"signal", sig.String(),
				)
			}
		}
	}()
}

/* signals.go ends here. */
