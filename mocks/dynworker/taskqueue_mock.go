// Code generated by MockGen. DO NOT EDIT.
// Source: ./dynworker/taskqueue.go
//
// Generated by this command:
//
//	mockgen -package=dynworker -source=./dynworker/taskqueue.go -destination=mocks/dynworker/taskqueue_mock.go
//

// Package dynworker is a generated GoMock package.
package dynworker

import (
	context "context"
	reflect "reflect"

	dynworker "github.com/Asmodai/gohacks/dynworker"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskQueue is a mock of TaskQueue interface.
type MockTaskQueue struct {
	ctrl     *gomock.Controller
	recorder *MockTaskQueueMockRecorder
	isgomock struct{}
}

// MockTaskQueueMockRecorder is the mock recorder for MockTaskQueue.
type MockTaskQueueMockRecorder struct {
	mock *MockTaskQueue
}

// NewMockTaskQueue creates a new mock instance.
func NewMockTaskQueue(ctrl *gomock.Controller) *MockTaskQueue {
	mock := &MockTaskQueue{ctrl: ctrl}
	mock.recorder = &MockTaskQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskQueue) EXPECT() *MockTaskQueueMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTaskQueue) Get(arg0 context.Context) (*dynworker.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*dynworker.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskQueueMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskQueue)(nil).Get), arg0)
}

// Len mocks base method.
func (m *MockTaskQueue) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockTaskQueueMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockTaskQueue)(nil).Len))
}

// Put mocks base method.
func (m *MockTaskQueue) Put(arg0 context.Context, arg1 *dynworker.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockTaskQueueMockRecorder) Put(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTaskQueue)(nil).Put), arg0, arg1)
}
