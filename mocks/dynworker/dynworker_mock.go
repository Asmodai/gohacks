// Code generated by MockGen. DO NOT EDIT.
// Source: ./dynworker/dynworker.go
//
// Generated by this command:
//
//	mockgen -package=dynworker -source=./dynworker/dynworker.go -destination=mocks/dynworker/dynworker_mock.go
//

// Package dynworker is a generated GoMock package.
package dynworker

import (
	reflect "reflect"

	dynworker "github.com/Asmodai/gohacks/dynworker"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerPool is a mock of WorkerPool interface.
type MockWorkerPool struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerPoolMockRecorder
	isgomock struct{}
}

// MockWorkerPoolMockRecorder is the mock recorder for MockWorkerPool.
type MockWorkerPoolMockRecorder struct {
	mock *MockWorkerPool
}

// NewMockWorkerPool creates a new mock instance.
func NewMockWorkerPool(ctrl *gomock.Controller) *MockWorkerPool {
	mock := &MockWorkerPool{ctrl: ctrl}
	mock.recorder = &MockWorkerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerPool) EXPECT() *MockWorkerPoolMockRecorder {
	return m.recorder
}

// MaxWorkers mocks base method.
func (m *MockWorkerPool) MaxWorkers() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxWorkers")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxWorkers indicates an expected call of MaxWorkers.
func (mr *MockWorkerPoolMockRecorder) MaxWorkers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxWorkers", reflect.TypeOf((*MockWorkerPool)(nil).MaxWorkers))
}

// MinWorkers mocks base method.
func (m *MockWorkerPool) MinWorkers() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinWorkers")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinWorkers indicates an expected call of MinWorkers.
func (mr *MockWorkerPoolMockRecorder) MinWorkers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinWorkers", reflect.TypeOf((*MockWorkerPool)(nil).MinWorkers))
}

// Name mocks base method.
func (m *MockWorkerPool) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWorkerPoolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWorkerPool)(nil).Name))
}

// SetMaxWorkers mocks base method.
func (m *MockWorkerPool) SetMaxWorkers(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxWorkers", arg0)
}

// SetMaxWorkers indicates an expected call of SetMaxWorkers.
func (mr *MockWorkerPoolMockRecorder) SetMaxWorkers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxWorkers", reflect.TypeOf((*MockWorkerPool)(nil).SetMaxWorkers), arg0)
}

// SetMinWorkers mocks base method.
func (m *MockWorkerPool) SetMinWorkers(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMinWorkers", arg0)
}

// SetMinWorkers indicates an expected call of SetMinWorkers.
func (mr *MockWorkerPoolMockRecorder) SetMinWorkers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMinWorkers", reflect.TypeOf((*MockWorkerPool)(nil).SetMinWorkers), arg0)
}

// SetScalerFunction mocks base method.
func (m *MockWorkerPool) SetScalerFunction(arg0 dynworker.ScalerFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetScalerFunction", arg0)
}

// SetScalerFunction indicates an expected call of SetScalerFunction.
func (mr *MockWorkerPoolMockRecorder) SetScalerFunction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScalerFunction", reflect.TypeOf((*MockWorkerPool)(nil).SetScalerFunction), arg0)
}

// SetTaskFunction mocks base method.
func (m *MockWorkerPool) SetTaskFunction(arg0 dynworker.TaskFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTaskFunction", arg0)
}

// SetTaskFunction indicates an expected call of SetTaskFunction.
func (mr *MockWorkerPoolMockRecorder) SetTaskFunction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskFunction", reflect.TypeOf((*MockWorkerPool)(nil).SetTaskFunction), arg0)
}

// Start mocks base method.
func (m *MockWorkerPool) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockWorkerPoolMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorkerPool)(nil).Start))
}

// Stop mocks base method.
func (m *MockWorkerPool) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkerPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorkerPool)(nil).Stop))
}

// Submit mocks base method.
func (m *MockWorkerPool) Submit(arg0 dynworker.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Submit indicates an expected call of Submit.
func (mr *MockWorkerPoolMockRecorder) Submit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockWorkerPool)(nil).Submit), arg0)
}

// WorkerCount mocks base method.
func (m *MockWorkerPool) WorkerCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WorkerCount indicates an expected call of WorkerCount.
func (mr *MockWorkerPoolMockRecorder) WorkerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerCount", reflect.TypeOf((*MockWorkerPool)(nil).WorkerCount))
}
