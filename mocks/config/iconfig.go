// Code generated by MockGen. DO NOT EDIT.
// Source: ./config/iconfig.go
// +build testing

// Package config is a generated GoMock package.
package config

import (
	flag "flag"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIConfig is a mock of IConfig interface.
type MockIConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigMockRecorder
}

// MockIConfigMockRecorder is the mock recorder for MockIConfig.
type MockIConfigMockRecorder struct {
	mock *MockIConfig
}

// NewMockIConfig creates a new mock instance.
func NewMockIConfig(ctrl *gomock.Controller) *MockIConfig {
	mock := &MockIConfig{ctrl: ctrl}
	mock.recorder = &MockIConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfig) EXPECT() *MockIConfigMockRecorder {
	return m.recorder
}

// AddBoolFlag mocks base method.
func (m *MockIConfig) AddBoolFlag(p *bool, name string, value bool, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBoolFlag", p, name, value, usage)
}

// AddBoolFlag indicates an expected call of AddBoolFlag.
func (mr *MockIConfigMockRecorder) AddBoolFlag(p, name, value, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBoolFlag", reflect.TypeOf((*MockIConfig)(nil).AddBoolFlag), p, name, value, usage)
}

// AddFloat64Flag mocks base method.
func (m *MockIConfig) AddFloat64Flag(p *float64, name string, value float64, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFloat64Flag", p, name, value, usage)
}

// AddFloat64Flag indicates an expected call of AddFloat64Flag.
func (mr *MockIConfigMockRecorder) AddFloat64Flag(p, name, value, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloat64Flag", reflect.TypeOf((*MockIConfig)(nil).AddFloat64Flag), p, name, value, usage)
}

// AddInt64Flag mocks base method.
func (m *MockIConfig) AddInt64Flag(p *int64, name string, value int64, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt64Flag", p, name, value, usage)
}

// AddInt64Flag indicates an expected call of AddInt64Flag.
func (mr *MockIConfigMockRecorder) AddInt64Flag(p, name, value, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt64Flag", reflect.TypeOf((*MockIConfig)(nil).AddInt64Flag), p, name, value, usage)
}

// AddIntFlag mocks base method.
func (m *MockIConfig) AddIntFlag(p *int, name string, value int, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIntFlag", p, name, value, usage)
}

// AddIntFlag indicates an expected call of AddIntFlag.
func (mr *MockIConfigMockRecorder) AddIntFlag(p, name, value, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIntFlag", reflect.TypeOf((*MockIConfig)(nil).AddIntFlag), p, name, value, usage)
}

// AddStringFlag mocks base method.
func (m *MockIConfig) AddStringFlag(p *string, name, value, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStringFlag", p, name, value, usage)
}

// AddStringFlag indicates an expected call of AddStringFlag.
func (mr *MockIConfigMockRecorder) AddStringFlag(p, name, value, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStringFlag", reflect.TypeOf((*MockIConfig)(nil).AddStringFlag), p, name, value, usage)
}

// AddUint64Flag mocks base method.
func (m *MockIConfig) AddUint64Flag(p *uint64, name string, value uint64, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint64Flag", p, name, value, usage)
}

// AddUint64Flag indicates an expected call of AddUint64Flag.
func (mr *MockIConfigMockRecorder) AddUint64Flag(p, name, value, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint64Flag", reflect.TypeOf((*MockIConfig)(nil).AddUint64Flag), p, name, value, usage)
}

// AddUintFlag mocks base method.
func (m *MockIConfig) AddUintFlag(p *uint, name string, value uint, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUintFlag", p, name, value, usage)
}

// AddUintFlag indicates an expected call of AddUintFlag.
func (mr *MockIConfigMockRecorder) AddUintFlag(p, name, value, usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUintFlag", reflect.TypeOf((*MockIConfig)(nil).AddUintFlag), p, name, value, usage)
}

// AddValidator mocks base method.
func (m *MockIConfig) AddValidator(name string, fn interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddValidator", name, fn)
}

// AddValidator indicates an expected call of AddValidator.
func (mr *MockIConfigMockRecorder) AddValidator(name, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValidator", reflect.TypeOf((*MockIConfig)(nil).AddValidator), name, fn)
}

// IsDebug mocks base method.
func (m *MockIConfig) IsDebug() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDebug")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDebug indicates an expected call of IsDebug.
func (mr *MockIConfigMockRecorder) IsDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDebug", reflect.TypeOf((*MockIConfig)(nil).IsDebug))
}

// LogFile mocks base method.
func (m *MockIConfig) LogFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// LogFile indicates an expected call of LogFile.
func (mr *MockIConfigMockRecorder) LogFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFile", reflect.TypeOf((*MockIConfig)(nil).LogFile))
}

// LookupFlag mocks base method.
func (m *MockIConfig) LookupFlag(name string) *flag.Flag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupFlag", name)
	ret0, _ := ret[0].(*flag.Flag)
	return ret0
}

// LookupFlag indicates an expected call of LookupFlag.
func (mr *MockIConfigMockRecorder) LookupFlag(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupFlag", reflect.TypeOf((*MockIConfig)(nil).LookupFlag), name)
}

// Parse mocks base method.
func (m *MockIConfig) Parse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Parse")
}

// Parse indicates an expected call of Parse.
func (mr *MockIConfigMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIConfig)(nil).Parse))
}

// String mocks base method.
func (m *MockIConfig) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIConfigMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIConfig)(nil).String))
}

// Validate mocks base method.
func (m *MockIConfig) Validate() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIConfigMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIConfig)(nil).Validate))
}
