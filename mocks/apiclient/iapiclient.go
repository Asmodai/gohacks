// Code generated by MockGen. DO NOT EDIT.
// Source: ./apiclient/iapiclient.go
// +build testing

// Package apiclient is a generated GoMock package.
package apiclient

import (
	reflect "reflect"

	apiclient "github.com/Asmodai/gohacks/apiclient"
	gomock "github.com/golang/mock/gomock"
)

// MockIApiClient is a mock of IApiClient interface.
type MockIApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockIApiClientMockRecorder
}

// MockIApiClientMockRecorder is the mock recorder for MockIApiClient.
type MockIApiClientMockRecorder struct {
	mock *MockIApiClient
}

// NewMockIApiClient creates a new mock instance.
func NewMockIApiClient(ctrl *gomock.Controller) *MockIApiClient {
	mock := &MockIApiClient{ctrl: ctrl}
	mock.recorder = &MockIApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApiClient) EXPECT() *MockIApiClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIApiClient) Get(data *apiclient.Params) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockIApiClientMockRecorder) Get(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIApiClient)(nil).Get), data)
}

// Post mocks base method.
func (m *MockIApiClient) Post(data *apiclient.Params) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockIApiClientMockRecorder) Post(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIApiClient)(nil).Post), data)
}
