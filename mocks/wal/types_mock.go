// Code generated by MockGen. DO NOT EDIT.
// Source: ./wal/types.go
//
// Generated by this command:
//
//	mockgen -package=wal -source=./wal/types.go -destination=mocks/wal/types_mock.go
//

// Package wal is a generated GoMock package.
package wal

import (
	reflect "reflect"

	wal "github.com/Asmodai/gohacks/wal"
	gomock "go.uber.org/mock/gomock"
)

// MockWriteAheadLog is a mock of WriteAheadLog interface.
type MockWriteAheadLog struct {
	ctrl     *gomock.Controller
	recorder *MockWriteAheadLogMockRecorder
	isgomock struct{}
}

// MockWriteAheadLogMockRecorder is the mock recorder for MockWriteAheadLog.
type MockWriteAheadLogMockRecorder struct {
	mock *MockWriteAheadLog
}

// NewMockWriteAheadLog creates a new mock instance.
func NewMockWriteAheadLog(ctrl *gomock.Controller) *MockWriteAheadLog {
	mock := &MockWriteAheadLog{ctrl: ctrl}
	mock.recorder = &MockWriteAheadLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteAheadLog) EXPECT() *MockWriteAheadLogMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockWriteAheadLog) Append(lsn uint64, tstamp int64, key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", lsn, tstamp, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockWriteAheadLogMockRecorder) Append(lsn, tstamp, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockWriteAheadLog)(nil).Append), lsn, tstamp, key, value)
}

// Close mocks base method.
func (m *MockWriteAheadLog) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriteAheadLogMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteAheadLog)(nil).Close))
}

// Replay mocks base method.
func (m *MockWriteAheadLog) Replay(baseLSN uint64, applyCb wal.ApplyCallbackFn) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replay", baseLSN, applyCb)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replay indicates an expected call of Replay.
func (mr *MockWriteAheadLogMockRecorder) Replay(baseLSN, applyCb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replay", reflect.TypeOf((*MockWriteAheadLog)(nil).Replay), baseLSN, applyCb)
}

// Reset mocks base method.
func (m *MockWriteAheadLog) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockWriteAheadLogMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockWriteAheadLog)(nil).Reset))
}

// SetPolicy mocks base method.
func (m *MockWriteAheadLog) SetPolicy(arg0 wal.Policy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPolicy", arg0)
}

// SetPolicy indicates an expected call of SetPolicy.
func (mr *MockWriteAheadLogMockRecorder) SetPolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPolicy", reflect.TypeOf((*MockWriteAheadLog)(nil).SetPolicy), arg0)
}

// Sync mocks base method.
func (m *MockWriteAheadLog) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockWriteAheadLogMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockWriteAheadLog)(nil).Sync))
}
