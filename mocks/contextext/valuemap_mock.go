// Code generated by MockGen. DO NOT EDIT.
// Source: ./contextext/valuemap.go
//
// Generated by this command:
//
//	mockgen -package=contextext -source=./contextext/valuemap.go -destination=mocks/contextext/valuemap_mock.go
//

// Package contextext is a generated GoMock package.
package contextext

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockValueMap is a mock of ValueMap interface.
type MockValueMap struct {
	ctrl     *gomock.Controller
	recorder *MockValueMapMockRecorder
}

// MockValueMapMockRecorder is the mock recorder for MockValueMap.
type MockValueMapMockRecorder struct {
	mock *MockValueMap
}

// NewMockValueMap creates a new mock instance.
func NewMockValueMap(ctrl *gomock.Controller) *MockValueMap {
	mock := &MockValueMap{ctrl: ctrl}
	mock.recorder = &MockValueMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueMap) EXPECT() *MockValueMapMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockValueMap) Get(arg0 string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockValueMapMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockValueMap)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockValueMap) Set(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockValueMapMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockValueMap)(nil).Set), key, value)
}
