// Code generated by MockGen. DO NOT EDIT.
// Source: ./process/imanager.go
// +build testing

// Package mock_process is a generated GoMock package.
package mock_process

import (
	reflect "reflect"

	process "github.com/Asmodai/gohacks/process"
	gomock "github.com/golang/mock/gomock"
)

// MockIManager is a mock of IManager interface.
type MockIManager struct {
	ctrl     *gomock.Controller
	recorder *MockIManagerMockRecorder
}

// MockIManagerMockRecorder is the mock recorder for MockIManager.
type MockIManagerMockRecorder struct {
	mock *MockIManager
}

// NewMockIManager creates a new mock instance.
func NewMockIManager(ctrl *gomock.Controller) *MockIManager {
	mock := &MockIManager{ctrl: ctrl}
	mock.recorder = &MockIManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManager) EXPECT() *MockIManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIManager) Add(proc *process.Process) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", proc)
}

// Add indicates an expected call of Add.
func (mr *MockIManagerMockRecorder) Add(proc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIManager)(nil).Add), proc)
}

// Count mocks base method.
func (m *MockIManager) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockIManagerMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIManager)(nil).Count))
}

// Create mocks base method.
func (m *MockIManager) Create(config *process.Config) *process.Process {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", config)
	ret0, _ := ret[0].(*process.Process)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIManagerMockRecorder) Create(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIManager)(nil).Create), config)
}

// Find mocks base method.
func (m *MockIManager) Find(name string) (*process.Process, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", name)
	ret0, _ := ret[0].(*process.Process)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIManagerMockRecorder) Find(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIManager)(nil).Find), name)
}

// Processes mocks base method.
func (m *MockIManager) Processes() *[]*process.Process {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processes")
	ret0, _ := ret[0].(*[]*process.Process)
	return ret0
}

// Processes indicates an expected call of Processes.
func (mr *MockIManagerMockRecorder) Processes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processes", reflect.TypeOf((*MockIManager)(nil).Processes))
}

// Run mocks base method.
func (m *MockIManager) Run(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIManagerMockRecorder) Run(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIManager)(nil).Run), name)
}

// Stop mocks base method.
func (m *MockIManager) Stop(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIManagerMockRecorder) Stop(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIManager)(nil).Stop), name)
}

// StopAll mocks base method.
func (m *MockIManager) StopAll() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAll")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StopAll indicates an expected call of StopAll.
func (mr *MockIManagerMockRecorder) StopAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAll", reflect.TypeOf((*MockIManager)(nil).StopAll))
}
