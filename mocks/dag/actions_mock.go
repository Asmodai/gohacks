// Code generated by MockGen. DO NOT EDIT.
// Source: ./dag/actions.go
//
// Generated by this command:
//
//	mockgen -package=dag -source=./dag/actions.go -destination=mocks/dag/actions_mock.go
//

// Package dag is a generated GoMock package.
package dag

import (
	reflect "reflect"

	dag "github.com/Asmodai/gohacks/dag"
	gomock "go.uber.org/mock/gomock"
)

// MockActions is a mock of Actions interface.
type MockActions struct {
	ctrl     *gomock.Controller
	recorder *MockActionsMockRecorder
	isgomock struct{}
}

// MockActionsMockRecorder is the mock recorder for MockActions.
type MockActionsMockRecorder struct {
	mock *MockActions
}

// NewMockActions creates a new mock instance.
func NewMockActions(ctrl *gomock.Controller) *MockActions {
	mock := &MockActions{ctrl: ctrl}
	mock.recorder = &MockActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActions) EXPECT() *MockActionsMockRecorder {
	return m.recorder
}

// Builder mocks base method.
func (m *MockActions) Builder(arg0 string, arg1 dag.ActionParams) (dag.ActionFn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Builder", arg0, arg1)
	ret0, _ := ret[0].(dag.ActionFn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Builder indicates an expected call of Builder.
func (mr *MockActionsMockRecorder) Builder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Builder", reflect.TypeOf((*MockActions)(nil).Builder), arg0, arg1)
}
