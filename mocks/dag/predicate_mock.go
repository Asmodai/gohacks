// Code generated by MockGen. DO NOT EDIT.
// Source: ./dag/predicate.go
//
// Generated by this command:
//
//	mockgen -package=dag -source=./dag/predicate.go -destination=mocks/dag/predicate_mock.go
//

// Package dag is a generated GoMock package.
package dag

import (
	reflect "reflect"

	dag "github.com/Asmodai/gohacks/dag"
	gomock "go.uber.org/mock/gomock"
)

// MockPredicate is a mock of Predicate interface.
type MockPredicate struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateMockRecorder
	isgomock struct{}
}

// MockPredicateMockRecorder is the mock recorder for MockPredicate.
type MockPredicateMockRecorder struct {
	mock *MockPredicate
}

// NewMockPredicate creates a new mock instance.
func NewMockPredicate(ctrl *gomock.Controller) *MockPredicate {
	mock := &MockPredicate{ctrl: ctrl}
	mock.recorder = &MockPredicateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredicate) EXPECT() *MockPredicateMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockPredicate) Eval(arg0 dag.Filterable) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockPredicateMockRecorder) Eval(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockPredicate)(nil).Eval), arg0)
}

// String mocks base method.
func (m *MockPredicate) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPredicateMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPredicate)(nil).String))
}

// MockPredicateBuilder is a mock of PredicateBuilder interface.
type MockPredicateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateBuilderMockRecorder
	isgomock struct{}
}

// MockPredicateBuilderMockRecorder is the mock recorder for MockPredicateBuilder.
type MockPredicateBuilderMockRecorder struct {
	mock *MockPredicateBuilder
}

// NewMockPredicateBuilder creates a new mock instance.
func NewMockPredicateBuilder(ctrl *gomock.Controller) *MockPredicateBuilder {
	mock := &MockPredicateBuilder{ctrl: ctrl}
	mock.recorder = &MockPredicateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredicateBuilder) EXPECT() *MockPredicateBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockPredicateBuilder) Build(arg0 string, arg1 any) dag.Predicate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1)
	ret0, _ := ret[0].(dag.Predicate)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockPredicateBuilderMockRecorder) Build(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockPredicateBuilder)(nil).Build), arg0, arg1)
}

// Token mocks base method.
func (m *MockPredicateBuilder) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockPredicateBuilderMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockPredicateBuilder)(nil).Token))
}
