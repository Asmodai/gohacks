// Code generated by MockGen. DO NOT EDIT.
// Source: ./responder/respondable.go
//
// Generated by this command:
//
//	mockgen -package=responder -source=./responder/respondable.go -destination=mocks/responder/respondable_mock.go
//

// Package responder is a generated GoMock package.
package responder

import (
	reflect "reflect"

	events "github.com/Asmodai/gohacks/events"
	gomock "go.uber.org/mock/gomock"
)

// MockRespondable is a mock of Respondable interface.
type MockRespondable struct {
	ctrl     *gomock.Controller
	recorder *MockRespondableMockRecorder
	isgomock struct{}
}

// MockRespondableMockRecorder is the mock recorder for MockRespondable.
type MockRespondableMockRecorder struct {
	mock *MockRespondable
}

// NewMockRespondable creates a new mock instance.
func NewMockRespondable(ctrl *gomock.Controller) *MockRespondable {
	mock := &MockRespondable{ctrl: ctrl}
	mock.recorder = &MockRespondableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRespondable) EXPECT() *MockRespondableMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockRespondable) Invoke(arg0 events.Event) events.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", arg0)
	ret0, _ := ret[0].(events.Event)
	return ret0
}

// Invoke indicates an expected call of Invoke.
func (mr *MockRespondableMockRecorder) Invoke(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockRespondable)(nil).Invoke), arg0)
}

// Name mocks base method.
func (m *MockRespondable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRespondableMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRespondable)(nil).Name))
}

// RespondsTo mocks base method.
func (m *MockRespondable) RespondsTo(arg0 events.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondsTo", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RespondsTo indicates an expected call of RespondsTo.
func (mr *MockRespondableMockRecorder) RespondsTo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondsTo", reflect.TypeOf((*MockRespondable)(nil).RespondsTo), arg0)
}

// Type mocks base method.
func (m *MockRespondable) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockRespondableMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockRespondable)(nil).Type))
}
