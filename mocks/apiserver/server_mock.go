// Code generated by MockGen. DO NOT EDIT.
// Source: ./apiserver/server.go
//
// Generated by this command:
//
//	mockgen -package=apiserver -source=./apiserver/server.go -destination=mocks/apiserver/server_mock.go
//

// Package apiserver is a generated GoMock package.
package apiserver

import (
	context "context"
	tls "crypto/tls"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
	isgomock struct{}
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// ListenAndServe mocks base method.
func (m *MockServer) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockServerMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockServer)(nil).ListenAndServe))
}

// ListenAndServeTLS mocks base method.
func (m *MockServer) ListenAndServeTLS(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServeTLS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServeTLS indicates an expected call of ListenAndServeTLS.
func (mr *MockServerMockRecorder) ListenAndServeTLS(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServeTLS", reflect.TypeOf((*MockServer)(nil).ListenAndServeTLS), arg0, arg1)
}

// SetTLSConfig mocks base method.
func (m *MockServer) SetTLSConfig(arg0 *tls.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTLSConfig", arg0)
}

// SetTLSConfig indicates an expected call of SetTLSConfig.
func (mr *MockServerMockRecorder) SetTLSConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTLSConfig", reflect.TypeOf((*MockServer)(nil).SetTLSConfig), arg0)
}

// Shutdown mocks base method.
func (m *MockServer) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServerMockRecorder) Shutdown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServer)(nil).Shutdown), arg0)
}
