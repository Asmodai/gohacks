// Code generated by MockGen. DO NOT EDIT.
// Source: ./apiserver/iserver.go
// +build testing

// Package apiserver is a generated GoMock package.
package apiserver

import (
	context "context"
	tls "crypto/tls"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIServer is a mock of IServer interface.
type MockIServer struct {
	ctrl     *gomock.Controller
	recorder *MockIServerMockRecorder
}

// MockIServerMockRecorder is the mock recorder for MockIServer.
type MockIServerMockRecorder struct {
	mock *MockIServer
}

// NewMockIServer creates a new mock instance.
func NewMockIServer(ctrl *gomock.Controller) *MockIServer {
	mock := &MockIServer{ctrl: ctrl}
	mock.recorder = &MockIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServer) EXPECT() *MockIServerMockRecorder {
	return m.recorder
}

// ListenAndServe mocks base method.
func (m *MockIServer) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockIServerMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockIServer)(nil).ListenAndServe))
}

// ListenAndServeTLS mocks base method.
func (m *MockIServer) ListenAndServeTLS(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServeTLS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServeTLS indicates an expected call of ListenAndServeTLS.
func (mr *MockIServerMockRecorder) ListenAndServeTLS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServeTLS", reflect.TypeOf((*MockIServer)(nil).ListenAndServeTLS), arg0, arg1)
}

// SetTLSConfig mocks base method.
func (m *MockIServer) SetTLSConfig(arg0 *tls.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTLSConfig", arg0)
}

// SetTLSConfig indicates an expected call of SetTLSConfig.
func (mr *MockIServerMockRecorder) SetTLSConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTLSConfig", reflect.TypeOf((*MockIServer)(nil).SetTLSConfig), arg0)
}

// Shutdown mocks base method.
func (m *MockIServer) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIServerMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIServer)(nil).Shutdown), arg0)
}
