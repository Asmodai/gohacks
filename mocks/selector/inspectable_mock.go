// Code generated by MockGen. DO NOT EDIT.
// Source: ./selector/inspectable.go
//
// Generated by this command:
//
//	mockgen -package=selector -source=./selector/inspectable.go -destination=mocks/selector/inspectable_mock.go
//

// Package selector is a generated GoMock package.
package selector

import (
	reflect "reflect"

	events "github.com/Asmodai/gohacks/events"
	selector "github.com/Asmodai/gohacks/selector"
	gomock "go.uber.org/mock/gomock"
)

// MockIntrospectable is a mock of Introspectable interface.
type MockIntrospectable struct {
	ctrl     *gomock.Controller
	recorder *MockIntrospectableMockRecorder
	isgomock struct{}
}

// MockIntrospectableMockRecorder is the mock recorder for MockIntrospectable.
type MockIntrospectableMockRecorder struct {
	mock *MockIntrospectable
}

// NewMockIntrospectable creates a new mock instance.
func NewMockIntrospectable(ctrl *gomock.Controller) *MockIntrospectable {
	mock := &MockIntrospectable{ctrl: ctrl}
	mock.recorder = &MockIntrospectableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntrospectable) EXPECT() *MockIntrospectableMockRecorder {
	return m.recorder
}

// ConformsTo mocks base method.
func (m *MockIntrospectable) ConformsTo(protocol string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConformsTo", protocol)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConformsTo indicates an expected call of ConformsTo.
func (mr *MockIntrospectableMockRecorder) ConformsTo(protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConformsTo", reflect.TypeOf((*MockIntrospectable)(nil).ConformsTo), protocol)
}

// Invoke mocks base method.
func (m *MockIntrospectable) Invoke(arg0 events.Event) events.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", arg0)
	ret0, _ := ret[0].(events.Event)
	return ret0
}

// Invoke indicates an expected call of Invoke.
func (mr *MockIntrospectableMockRecorder) Invoke(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockIntrospectable)(nil).Invoke), arg0)
}

// ListProtocols mocks base method.
func (m *MockIntrospectable) ListProtocols() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtocols")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListProtocols indicates an expected call of ListProtocols.
func (mr *MockIntrospectableMockRecorder) ListProtocols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtocols", reflect.TypeOf((*MockIntrospectable)(nil).ListProtocols))
}

// MetadataForSelector mocks base method.
func (m *MockIntrospectable) MetadataForSelector(arg0 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataForSelector", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataForSelector indicates an expected call of MetadataForSelector.
func (mr *MockIntrospectableMockRecorder) MetadataForSelector(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataForSelector", reflect.TypeOf((*MockIntrospectable)(nil).MetadataForSelector), arg0)
}

// Methods mocks base method.
func (m *MockIntrospectable) Methods() *selector.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Methods")
	ret0, _ := ret[0].(*selector.Table)
	return ret0
}

// Methods indicates an expected call of Methods.
func (mr *MockIntrospectableMockRecorder) Methods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Methods", reflect.TypeOf((*MockIntrospectable)(nil).Methods))
}

// Name mocks base method.
func (m *MockIntrospectable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIntrospectableMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIntrospectable)(nil).Name))
}

// RespondsTo mocks base method.
func (m *MockIntrospectable) RespondsTo(arg0 events.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondsTo", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RespondsTo indicates an expected call of RespondsTo.
func (mr *MockIntrospectableMockRecorder) RespondsTo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondsTo", reflect.TypeOf((*MockIntrospectable)(nil).RespondsTo), arg0)
}

// Selectors mocks base method.
func (m *MockIntrospectable) Selectors() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Selectors")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Selectors indicates an expected call of Selectors.
func (mr *MockIntrospectableMockRecorder) Selectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Selectors", reflect.TypeOf((*MockIntrospectable)(nil).Selectors))
}

// SortedSelectors mocks base method.
func (m *MockIntrospectable) SortedSelectors() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortedSelectors")
	ret0, _ := ret[0].([]string)
	return ret0
}

// SortedSelectors indicates an expected call of SortedSelectors.
func (mr *MockIntrospectableMockRecorder) SortedSelectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortedSelectors", reflect.TypeOf((*MockIntrospectable)(nil).SortedSelectors))
}

// Type mocks base method.
func (m *MockIntrospectable) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockIntrospectableMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockIntrospectable)(nil).Type))
}
