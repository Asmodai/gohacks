// Code generated by MockGen. DO NOT EDIT.
// Source: ./selector/event_interface.go
//
// Generated by this command:
//
//	mockgen -package=selector -source=./selector/event_interface.go -destination=mocks/selector/event_interface_mock.go
//

// Package selector is a generated GoMock package.
package selector

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockSelectorEvent is a mock of SelectorEvent interface.
type MockSelectorEvent struct {
	ctrl     *gomock.Controller
	recorder *MockSelectorEventMockRecorder
	isgomock struct{}
}

// MockSelectorEventMockRecorder is the mock recorder for MockSelectorEvent.
type MockSelectorEventMockRecorder struct {
	mock *MockSelectorEvent
}

// NewMockSelectorEvent creates a new mock instance.
func NewMockSelectorEvent(ctrl *gomock.Controller) *MockSelectorEvent {
	mock := &MockSelectorEvent{ctrl: ctrl}
	mock.recorder = &MockSelectorEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectorEvent) EXPECT() *MockSelectorEventMockRecorder {
	return m.recorder
}

// Selector mocks base method.
func (m *MockSelectorEvent) Selector() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Selector")
	ret0, _ := ret[0].(string)
	return ret0
}

// Selector indicates an expected call of Selector.
func (mr *MockSelectorEventMockRecorder) Selector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Selector", reflect.TypeOf((*MockSelectorEvent)(nil).Selector))
}

// String mocks base method.
func (m *MockSelectorEvent) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockSelectorEventMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSelectorEvent)(nil).String))
}

// When mocks base method.
func (m *MockSelectorEvent) When() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "When")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// When indicates an expected call of When.
func (mr *MockSelectorEventMockRecorder) When() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "When", reflect.TypeOf((*MockSelectorEvent)(nil).When))
}
