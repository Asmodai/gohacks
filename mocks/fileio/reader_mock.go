// Code generated by MockGen. DO NOT EDIT.
// Source: ./fileio/reader.go
//
// Generated by this command:
//
//	mockgen -package=fileio -source=./fileio/reader.go -destination=mocks/fileio/reader_mock.go
//

// Package fileio is a generated GoMock package.
package fileio

import (
	context "context"
	io "io"
	reflect "reflect"

	fileio "github.com/Asmodai/gohacks/fileio"
	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// CopyTo mocks base method.
func (m *MockReader) CopyTo(writer io.Writer, limit int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyTo", writer, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockReaderMockRecorder) CopyTo(writer, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockReader)(nil).CopyTo), writer, limit)
}

// Exists mocks base method.
func (m *MockReader) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockReaderMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockReader)(nil).Exists))
}

// Filename mocks base method.
func (m *MockReader) Filename() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filename")
	ret0, _ := ret[0].(string)
	return ret0
}

// Filename indicates an expected call of Filename.
func (mr *MockReaderMockRecorder) Filename() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filename", reflect.TypeOf((*MockReader)(nil).Filename))
}

// IsSymlink mocks base method.
func (m *MockReader) IsSymlink() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSymlink")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSymlink indicates an expected call of IsSymlink.
func (mr *MockReaderMockRecorder) IsSymlink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSymlink", reflect.TypeOf((*MockReader)(nil).IsSymlink))
}

// Load mocks base method.
func (m *MockReader) Load() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockReaderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockReader)(nil).Load))
}

// Open mocks base method.
func (m *MockReader) Open() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockReaderMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockReader)(nil).Open))
}

// Stream mocks base method.
func (m *MockReader) Stream(ctx context.Context, chunkSize, bufSize int, limit int64) fileio.StreamResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, chunkSize, bufSize, limit)
	ret0, _ := ret[0].(fileio.StreamResult)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockReaderMockRecorder) Stream(ctx, chunkSize, bufSize, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockReader)(nil).Stream), ctx, chunkSize, bufSize, limit)
}
