// Code generated by MockGen. DO NOT EDIT.
// Source: ./fileio/interfaces.go
//
// Generated by this command:
//
//	mockgen -package=fileio -source=./fileio/interfaces.go -destination=mocks/fileio/interfaces_mock.go
//

// Package fileio is a generated GoMock package.
package fileio

import (
	context "context"
	io "io"
	os "os"
	reflect "reflect"

	fileio "github.com/Asmodai/gohacks/fileio"
	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// CopyTo mocks base method.
func (m *MockReader) CopyTo(writer io.Writer, limit int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyTo", writer, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockReaderMockRecorder) CopyTo(writer, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockReader)(nil).CopyTo), writer, limit)
}

// Exists mocks base method.
func (m *MockReader) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockReaderMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockReader)(nil).Exists))
}

// Filename mocks base method.
func (m *MockReader) Filename() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filename")
	ret0, _ := ret[0].(string)
	return ret0
}

// Filename indicates an expected call of Filename.
func (mr *MockReaderMockRecorder) Filename() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filename", reflect.TypeOf((*MockReader)(nil).Filename))
}

// IsSymlink mocks base method.
func (m *MockReader) IsSymlink() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSymlink")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSymlink indicates an expected call of IsSymlink.
func (mr *MockReaderMockRecorder) IsSymlink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSymlink", reflect.TypeOf((*MockReader)(nil).IsSymlink))
}

// Load mocks base method.
func (m *MockReader) Load() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockReaderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockReader)(nil).Load))
}

// Open mocks base method.
func (m *MockReader) Open() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockReaderMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockReader)(nil).Open))
}

// Stream mocks base method.
func (m *MockReader) Stream(ctx context.Context, chunkSize, bufSize int, limit int64) fileio.StreamResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, chunkSize, bufSize, limit)
	ret0, _ := ret[0].(fileio.StreamResult)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockReaderMockRecorder) Stream(ctx, chunkSize, bufSize, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockReader)(nil).Stream), ctx, chunkSize, bufSize, limit)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
	isgomock struct{}
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockWriter) Abort() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort")
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockWriterMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockWriter)(nil).Abort))
}

// BytesWritten mocks base method.
func (m *MockWriter) BytesWritten() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesWritten")
	ret0, _ := ret[0].(int64)
	return ret0
}

// BytesWritten indicates an expected call of BytesWritten.
func (mr *MockWriterMockRecorder) BytesWritten() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesWritten", reflect.TypeOf((*MockWriter)(nil).BytesWritten))
}

// Close mocks base method.
func (m *MockWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriter)(nil).Close))
}

// Name mocks base method.
func (m *MockWriter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWriterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWriter)(nil).Name))
}

// Sync mocks base method.
func (m *MockWriter) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockWriterMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockWriter)(nil).Sync))
}

// Write mocks base method.
func (m *MockWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), p)
}

// MockFiles is a mock of Files interface.
type MockFiles struct {
	ctrl     *gomock.Controller
	recorder *MockFilesMockRecorder
	isgomock struct{}
}

// MockFilesMockRecorder is the mock recorder for MockFiles.
type MockFilesMockRecorder struct {
	mock *MockFiles
}

// NewMockFiles creates a new mock instance.
func NewMockFiles(ctrl *gomock.Controller) *MockFiles {
	mock := &MockFiles{ctrl: ctrl}
	mock.recorder = &MockFilesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFiles) EXPECT() *MockFilesMockRecorder {
	return m.recorder
}

// AppendFile mocks base method.
func (m *MockFiles) AppendFile(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 fileio.WriteOptions) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendFile indicates an expected call of AppendFile.
func (mr *MockFilesMockRecorder) AppendFile(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendFile", reflect.TypeOf((*MockFiles)(nil).AppendFile), arg0, arg1, arg2, arg3)
}

// MkdirAll mocks base method.
func (m *MockFiles) MkdirAll(arg0 string, arg1 os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFilesMockRecorder) MkdirAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFiles)(nil).MkdirAll), arg0, arg1)
}

// OpenWriter mocks base method.
func (m *MockFiles) OpenWriter(arg0 context.Context, arg1 string, arg2 fileio.WriteOptions) (fileio.Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenWriter", arg0, arg1, arg2)
	ret0, _ := ret[0].(fileio.Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenWriter indicates an expected call of OpenWriter.
func (mr *MockFilesMockRecorder) OpenWriter(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenWriter", reflect.TypeOf((*MockFiles)(nil).OpenWriter), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockFiles) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFilesMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFiles)(nil).Remove), arg0)
}

// Rename mocks base method.
func (m *MockFiles) Rename(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockFilesMockRecorder) Rename(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFiles)(nil).Rename), arg0, arg1)
}

// WriteFile mocks base method.
func (m *MockFiles) WriteFile(arg0 context.Context, arg1 string, arg2 []byte, arg3 fileio.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFilesMockRecorder) WriteFile(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFiles)(nil).WriteFile), arg0, arg1, arg2, arg3)
}
