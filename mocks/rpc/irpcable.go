// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpc/irpcable.go
// +build testing

// Package rpc is a generated GoMock package.
package rpc

import (
	reflect "reflect"

	rpc "github.com/Asmodai/gohacks/rpc"
	gomock "github.com/golang/mock/gomock"
)

// MockIRPCAble is a mock of IRPCAble interface.
type MockIRPCAble struct {
	ctrl     *gomock.Controller
	recorder *MockIRPCAbleMockRecorder
}

// MockIRPCAbleMockRecorder is the mock recorder for MockIRPCAble.
type MockIRPCAbleMockRecorder struct {
	mock *MockIRPCAble
}

// NewMockIRPCAble creates a new mock instance.
func NewMockIRPCAble(ctrl *gomock.Controller) *MockIRPCAble {
	mock := &MockIRPCAble{ctrl: ctrl}
	mock.recorder = &MockIRPCAbleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRPCAble) EXPECT() *MockIRPCAbleMockRecorder {
	return m.recorder
}

// RpcInfo mocks base method.
func (m *MockIRPCAble) RpcInfo(arg0 rpc.NoArgs, arg1 *rpc.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RpcInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RpcInfo indicates an expected call of RpcInfo.
func (mr *MockIRPCAbleMockRecorder) RpcInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RpcInfo", reflect.TypeOf((*MockIRPCAble)(nil).RpcInfo), arg0, arg1)
}
