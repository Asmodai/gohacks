// Code generated by MockGen. DO NOT EDIT.
// Source: ./fileloader/fileloader.go
//
// Generated by this command:
//
//	mockgen -package=fileloader -source=./fileloader/fileloader.go -destination=mocks/fileloader/fileloader_mock.go
//

// Package fileloader is a generated GoMock package.
package fileloader

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileLoader is a mock of FileLoader interface.
type MockFileLoader struct {
	ctrl     *gomock.Controller
	recorder *MockFileLoaderMockRecorder
	isgomock struct{}
}

// MockFileLoaderMockRecorder is the mock recorder for MockFileLoader.
type MockFileLoaderMockRecorder struct {
	mock *MockFileLoader
}

// NewMockFileLoader creates a new mock instance.
func NewMockFileLoader(ctrl *gomock.Controller) *MockFileLoader {
	mock := &MockFileLoader{ctrl: ctrl}
	mock.recorder = &MockFileLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileLoader) EXPECT() *MockFileLoaderMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockFileLoader) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockFileLoaderMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFileLoader)(nil).Exists))
}

// Filename mocks base method.
func (m *MockFileLoader) Filename() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filename")
	ret0, _ := ret[0].(string)
	return ret0
}

// Filename indicates an expected call of Filename.
func (mr *MockFileLoaderMockRecorder) Filename() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filename", reflect.TypeOf((*MockFileLoader)(nil).Filename))
}

// Load mocks base method.
func (m *MockFileLoader) Load() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockFileLoaderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockFileLoader)(nil).Load))
}
