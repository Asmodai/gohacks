// Code generated by MockGen. DO NOT EDIT.
// Source: ./database/worker.go
//
// Generated by this command:
//
//	mockgen -package=database -source=./database/worker.go -destination=mocks/database/worker_mock.go
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	database "github.com/Asmodai/gohacks/database"
	dynworker "github.com/Asmodai/gohacks/dynworker"
	gomock "go.uber.org/mock/gomock"
)

// MockTxnProvider is a mock of TxnProvider interface.
type MockTxnProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTxnProviderMockRecorder
	isgomock struct{}
}

// MockTxnProviderMockRecorder is the mock recorder for MockTxnProvider.
type MockTxnProviderMockRecorder struct {
	mock *MockTxnProvider
}

// NewMockTxnProvider creates a new mock instance.
func NewMockTxnProvider(ctrl *gomock.Controller) *MockTxnProvider {
	mock := &MockTxnProvider{ctrl: ctrl}
	mock.recorder = &MockTxnProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnProvider) EXPECT() *MockTxnProviderMockRecorder {
	return m.recorder
}

// Txn mocks base method.
func (m *MockTxnProvider) Txn(arg0 context.Context, arg1 database.Runner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockTxnProviderMockRecorder) Txn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockTxnProvider)(nil).Txn), arg0, arg1)
}

// MockWorkerJob is a mock of WorkerJob interface.
type MockWorkerJob struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerJobMockRecorder
	isgomock struct{}
}

// MockWorkerJobMockRecorder is the mock recorder for MockWorkerJob.
type MockWorkerJobMockRecorder struct {
	mock *MockWorkerJob
}

// NewMockWorkerJob creates a new mock instance.
func NewMockWorkerJob(ctrl *gomock.Controller) *MockWorkerJob {
	mock := &MockWorkerJob{ctrl: ctrl}
	mock.recorder = &MockWorkerJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerJob) EXPECT() *MockWorkerJobMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWorkerJob) Run(ctx context.Context, runner database.Runner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, runner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWorkerJobMockRecorder) Run(ctx, runner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorkerJob)(nil).Run), ctx, runner)
}

// MockBatchJob is a mock of BatchJob interface.
type MockBatchJob struct {
	ctrl     *gomock.Controller
	recorder *MockBatchJobMockRecorder
	isgomock struct{}
}

// MockBatchJobMockRecorder is the mock recorder for MockBatchJob.
type MockBatchJobMockRecorder struct {
	mock *MockBatchJob
}

// NewMockBatchJob creates a new mock instance.
func NewMockBatchJob(ctrl *gomock.Controller) *MockBatchJob {
	mock := &MockBatchJob{ctrl: ctrl}
	mock.recorder = &MockBatchJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchJob) EXPECT() *MockBatchJobMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockBatchJob) Run(ctx context.Context, runner database.Runner, data []dynworker.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, runner, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockBatchJobMockRecorder) Run(ctx, runner, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockBatchJob)(nil).Run), ctx, runner, data)
}

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
	isgomock struct{}
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockWorker) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWorkerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWorker)(nil).Name))
}

// Start mocks base method.
func (m *MockWorker) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockWorkerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorker)(nil).Start))
}

// Stop mocks base method.
func (m *MockWorker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorker)(nil).Stop))
}

// SubmitBatch mocks base method.
func (m *MockWorker) SubmitBatch(arg0 dynworker.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitBatch indicates an expected call of SubmitBatch.
func (mr *MockWorkerMockRecorder) SubmitBatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBatch", reflect.TypeOf((*MockWorker)(nil).SubmitBatch), arg0)
}

// SubmitJob mocks base method.
func (m *MockWorker) SubmitJob(arg0 database.WorkerJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitJob indicates an expected call of SubmitJob.
func (mr *MockWorkerMockRecorder) SubmitJob(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJob", reflect.TypeOf((*MockWorker)(nil).SubmitJob), arg0)
}
