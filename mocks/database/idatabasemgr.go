// Code generated by MockGen. DO NOT EDIT.
// Source: ./database/idatabasemgr.go
// +build testing

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	database "github.com/Asmodai/gohacks/database"
	gomock "github.com/golang/mock/gomock"
)

// MockIDatabaseMgr is a mock of IDatabaseMgr interface.
type MockIDatabaseMgr struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMgrMockRecorder
}

// MockIDatabaseMgrMockRecorder is the mock recorder for MockIDatabaseMgr.
type MockIDatabaseMgrMockRecorder struct {
	mock *MockIDatabaseMgr
}

// NewMockIDatabaseMgr creates a new mock instance.
func NewMockIDatabaseMgr(ctrl *gomock.Controller) *MockIDatabaseMgr {
	mock := &MockIDatabaseMgr{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabaseMgr) EXPECT() *MockIDatabaseMgrMockRecorder {
	return m.recorder
}

// CheckDB mocks base method.
func (m *MockIDatabaseMgr) CheckDB(arg0 database.IDatabase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDB indicates an expected call of CheckDB.
func (mr *MockIDatabaseMgrMockRecorder) CheckDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDB", reflect.TypeOf((*MockIDatabaseMgr)(nil).CheckDB), arg0)
}

// Open mocks base method.
func (m *MockIDatabaseMgr) Open(arg0, arg1 string) (database.IDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(database.IDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockIDatabaseMgrMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIDatabaseMgr)(nil).Open), arg0, arg1)
}

// OpenConfig mocks base method.
func (m *MockIDatabaseMgr) OpenConfig(arg0 *database.Config) (database.IDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenConfig", arg0)
	ret0, _ := ret[0].(database.IDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenConfig indicates an expected call of OpenConfig.
func (mr *MockIDatabaseMgrMockRecorder) OpenConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConfig", reflect.TypeOf((*MockIDatabaseMgr)(nil).OpenConfig), arg0)
}
