// Code generated by MockGen. DO NOT EDIT.
// Source: ./lucette/parser_interface.go
//
// Generated by this command:
//
//	mockgen -package=lucette -source=./lucette/parser_interface.go -destination=mocks/lucette/parser_interface_mock.go
//

// Package lucette is a generated GoMock package.
package lucette

import (
	reflect "reflect"

	lucette "github.com/Asmodai/gohacks/lucette"
	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
	isgomock struct{}
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Diagnostics mocks base method.
func (m *MockParser) Diagnostics() []lucette.Diagnostic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diagnostics")
	ret0, _ := ret[0].([]lucette.Diagnostic)
	return ret0
}

// Diagnostics indicates an expected call of Diagnostics.
func (mr *MockParserMockRecorder) Diagnostics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diagnostics", reflect.TypeOf((*MockParser)(nil).Diagnostics))
}

// Parse mocks base method.
func (m *MockParser) Parse(arg0 []lucette.LexedToken) (lucette.ASTNode, []lucette.Diagnostic) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(lucette.ASTNode)
	ret1, _ := ret[1].([]lucette.Diagnostic)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), arg0)
}

// Reset mocks base method.
func (m *MockParser) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockParserMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockParser)(nil).Reset))
}
