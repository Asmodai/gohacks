// Code generated by MockGen. DO NOT EDIT.
// Source: ./lucette/lexer_interface.go
//
// Generated by this command:
//
//	mockgen -package=lucette -source=./lucette/lexer_interface.go -destination=mocks/lucette/lexer_interface_mock.go
//

// Package lucette is a generated GoMock package.
package lucette

import (
	io "io"
	reflect "reflect"

	lucette "github.com/Asmodai/gohacks/lucette"
	gomock "go.uber.org/mock/gomock"
)

// MockLexer is a mock of Lexer interface.
type MockLexer struct {
	ctrl     *gomock.Controller
	recorder *MockLexerMockRecorder
	isgomock struct{}
}

// MockLexerMockRecorder is the mock recorder for MockLexer.
type MockLexerMockRecorder struct {
	mock *MockLexer
}

// NewMockLexer creates a new mock instance.
func NewMockLexer(ctrl *gomock.Controller) *MockLexer {
	mock := &MockLexer{ctrl: ctrl}
	mock.recorder = &MockLexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLexer) EXPECT() *MockLexerMockRecorder {
	return m.recorder
}

// Lex mocks base method.
func (m *MockLexer) Lex(arg0 io.Reader) ([]lucette.LexedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lex", arg0)
	ret0, _ := ret[0].([]lucette.LexedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lex indicates an expected call of Lex.
func (mr *MockLexerMockRecorder) Lex(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lex", reflect.TypeOf((*MockLexer)(nil).Lex), arg0)
}

// Reset mocks base method.
func (m *MockLexer) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockLexerMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockLexer)(nil).Reset))
}

// Tokens mocks base method.
func (m *MockLexer) Tokens() []lucette.LexedToken {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tokens")
	ret0, _ := ret[0].([]lucette.LexedToken)
	return ret0
}

// Tokens indicates an expected call of Tokens.
func (mr *MockLexerMockRecorder) Tokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tokens", reflect.TypeOf((*MockLexer)(nil).Tokens))
}
