// Code generated by MockGen. DO NOT EDIT.
// Source: ./lucette/simplify.go
//
// Generated by this command:
//
//	mockgen -package=lucette -source=./lucette/simplify.go -destination=mocks/lucette/simplify_mock.go
//

// Package lucette is a generated GoMock package.
package lucette

import (
	reflect "reflect"

	lucette "github.com/Asmodai/gohacks/lucette"
	gomock "go.uber.org/mock/gomock"
)

// MockSimplifier is a mock of Simplifier interface.
type MockSimplifier struct {
	ctrl     *gomock.Controller
	recorder *MockSimplifierMockRecorder
	isgomock struct{}
}

// MockSimplifierMockRecorder is the mock recorder for MockSimplifier.
type MockSimplifierMockRecorder struct {
	mock *MockSimplifier
}

// NewMockSimplifier creates a new mock instance.
func NewMockSimplifier(ctrl *gomock.Controller) *MockSimplifier {
	mock := &MockSimplifier{ctrl: ctrl}
	mock.recorder = &MockSimplifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimplifier) EXPECT() *MockSimplifierMockRecorder {
	return m.recorder
}

// Simplify mocks base method.
func (m *MockSimplifier) Simplify(arg0 lucette.IRNode) lucette.IRNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Simplify", arg0)
	ret0, _ := ret[0].(lucette.IRNode)
	return ret0
}

// Simplify indicates an expected call of Simplify.
func (mr *MockSimplifierMockRecorder) Simplify(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simplify", reflect.TypeOf((*MockSimplifier)(nil).Simplify), arg0)
}
