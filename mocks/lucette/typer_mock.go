// Code generated by MockGen. DO NOT EDIT.
// Source: ./lucette/typer.go
//
// Generated by this command:
//
//	mockgen -package=lucette -source=./lucette/typer.go -destination=mocks/lucette/typer_mock.go
//

// Package lucette is a generated GoMock package.
package lucette

import (
	reflect "reflect"

	lucette "github.com/Asmodai/gohacks/lucette"
	gomock "go.uber.org/mock/gomock"
)

// MockTyper is a mock of Typer interface.
type MockTyper struct {
	ctrl     *gomock.Controller
	recorder *MockTyperMockRecorder
	isgomock struct{}
}

// MockTyperMockRecorder is the mock recorder for MockTyper.
type MockTyperMockRecorder struct {
	mock *MockTyper
}

// NewMockTyper creates a new mock instance.
func NewMockTyper(ctrl *gomock.Controller) *MockTyper {
	mock := &MockTyper{ctrl: ctrl}
	mock.recorder = &MockTyperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTyper) EXPECT() *MockTyperMockRecorder {
	return m.recorder
}

// Diagnostics mocks base method.
func (m *MockTyper) Diagnostics() []lucette.Diagnostic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diagnostics")
	ret0, _ := ret[0].([]lucette.Diagnostic)
	return ret0
}

// Diagnostics indicates an expected call of Diagnostics.
func (mr *MockTyperMockRecorder) Diagnostics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diagnostics", reflect.TypeOf((*MockTyper)(nil).Diagnostics))
}

// Type mocks base method.
func (m *MockTyper) Type(arg0 lucette.ASTNode) (lucette.IRNode, []lucette.Diagnostic) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type", arg0)
	ret0, _ := ret[0].(lucette.IRNode)
	ret1, _ := ret[1].([]lucette.Diagnostic)
	return ret0, ret1
}

// Type indicates an expected call of Type.
func (mr *MockTyperMockRecorder) Type(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockTyper)(nil).Type), arg0)
}
