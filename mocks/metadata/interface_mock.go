// Code generated by MockGen. DO NOT EDIT.
// Source: ./metadata/interface.go
//
// Generated by this command:
//
//	mockgen -package=metadata -source=./metadata/interface.go -destination=mocks/metadata/interface_mock.go
//

// Package metadata is a generated GoMock package.
package metadata

import (
	reflect "reflect"

	metadata "github.com/Asmodai/gohacks/metadata"
	gomock "go.uber.org/mock/gomock"
)

// MockMetadata is a mock of Metadata interface.
type MockMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataMockRecorder
	isgomock struct{}
}

// MockMetadataMockRecorder is the mock recorder for MockMetadata.
type MockMetadataMockRecorder struct {
	mock *MockMetadata
}

// NewMockMetadata creates a new mock instance.
func NewMockMetadata(ctrl *gomock.Controller) *MockMetadata {
	mock := &MockMetadata{ctrl: ctrl}
	mock.recorder = &MockMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadata) EXPECT() *MockMetadataMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockMetadata) Clone() metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockMetadataMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockMetadata)(nil).Clone))
}

// Get mocks base method.
func (m *MockMetadata) Get(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetadataMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetadata)(nil).Get), arg0)
}

// GetAuthor mocks base method.
func (m *MockMetadata) GetAuthor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockMetadataMockRecorder) GetAuthor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockMetadata)(nil).GetAuthor))
}

// GetDeprecated mocks base method.
func (m *MockMetadata) GetDeprecated() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeprecated")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeprecated indicates an expected call of GetDeprecated.
func (mr *MockMetadataMockRecorder) GetDeprecated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeprecated", reflect.TypeOf((*MockMetadata)(nil).GetDeprecated))
}

// GetDoc mocks base method.
func (m *MockMetadata) GetDoc() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoc")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDoc indicates an expected call of GetDoc.
func (mr *MockMetadataMockRecorder) GetDoc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoc", reflect.TypeOf((*MockMetadata)(nil).GetDoc))
}

// GetExample mocks base method.
func (m *MockMetadata) GetExample() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExample")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExample indicates an expected call of GetExample.
func (mr *MockMetadataMockRecorder) GetExample() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExample", reflect.TypeOf((*MockMetadata)(nil).GetExample))
}

// GetProtocol mocks base method.
func (m *MockMetadata) GetProtocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProtocol indicates an expected call of GetProtocol.
func (mr *MockMetadataMockRecorder) GetProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocol", reflect.TypeOf((*MockMetadata)(nil).GetProtocol))
}

// GetSince mocks base method.
func (m *MockMetadata) GetSince() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSince")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSince indicates an expected call of GetSince.
func (mr *MockMetadataMockRecorder) GetSince() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSince", reflect.TypeOf((*MockMetadata)(nil).GetSince))
}

// GetTags mocks base method.
func (m *MockMetadata) GetTags() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTags indicates an expected call of GetTags.
func (mr *MockMetadataMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockMetadata)(nil).GetTags))
}

// GetVersion mocks base method.
func (m *MockMetadata) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockMetadataMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockMetadata)(nil).GetVersion))
}

// GetVisibility mocks base method.
func (m *MockMetadata) GetVisibility() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisibility")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVisibility indicates an expected call of GetVisibility.
func (mr *MockMetadataMockRecorder) GetVisibility() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisibility", reflect.TypeOf((*MockMetadata)(nil).GetVisibility))
}

// List mocks base method.
func (m *MockMetadata) List() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockMetadataMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetadata)(nil).List))
}

// Merge mocks base method.
func (m *MockMetadata) Merge(arg0 metadata.Metadata, arg1 bool) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0, arg1)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockMetadataMockRecorder) Merge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockMetadata)(nil).Merge), arg0, arg1)
}

// Set mocks base method.
func (m *MockMetadata) Set(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMetadataMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMetadata)(nil).Set), arg0, arg1)
}

// SetAuthor mocks base method.
func (m *MockMetadata) SetAuthor(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthor", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetAuthor indicates an expected call of SetAuthor.
func (mr *MockMetadataMockRecorder) SetAuthor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthor", reflect.TypeOf((*MockMetadata)(nil).SetAuthor), arg0)
}

// SetDeprecated mocks base method.
func (m *MockMetadata) SetDeprecated(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeprecated", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetDeprecated indicates an expected call of SetDeprecated.
func (mr *MockMetadataMockRecorder) SetDeprecated(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeprecated", reflect.TypeOf((*MockMetadata)(nil).SetDeprecated), arg0)
}

// SetDoc mocks base method.
func (m *MockMetadata) SetDoc(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDoc", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetDoc indicates an expected call of SetDoc.
func (mr *MockMetadataMockRecorder) SetDoc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDoc", reflect.TypeOf((*MockMetadata)(nil).SetDoc), arg0)
}

// SetExample mocks base method.
func (m *MockMetadata) SetExample(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExample", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetExample indicates an expected call of SetExample.
func (mr *MockMetadataMockRecorder) SetExample(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExample", reflect.TypeOf((*MockMetadata)(nil).SetExample), arg0)
}

// SetProtocol mocks base method.
func (m *MockMetadata) SetProtocol(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProtocol", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetProtocol indicates an expected call of SetProtocol.
func (mr *MockMetadataMockRecorder) SetProtocol(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProtocol", reflect.TypeOf((*MockMetadata)(nil).SetProtocol), arg0)
}

// SetSince mocks base method.
func (m *MockMetadata) SetSince(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSince", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetSince indicates an expected call of SetSince.
func (mr *MockMetadataMockRecorder) SetSince(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSince", reflect.TypeOf((*MockMetadata)(nil).SetSince), arg0)
}

// SetTags mocks base method.
func (m *MockMetadata) SetTags(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTags", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetTags indicates an expected call of SetTags.
func (mr *MockMetadataMockRecorder) SetTags(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockMetadata)(nil).SetTags), arg0)
}

// SetTagsFromSlice mocks base method.
func (m *MockMetadata) SetTagsFromSlice(arg0 []string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTagsFromSlice", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetTagsFromSlice indicates an expected call of SetTagsFromSlice.
func (mr *MockMetadataMockRecorder) SetTagsFromSlice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTagsFromSlice", reflect.TypeOf((*MockMetadata)(nil).SetTagsFromSlice), arg0)
}

// SetVersion mocks base method.
func (m *MockMetadata) SetVersion(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVersion", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockMetadataMockRecorder) SetVersion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockMetadata)(nil).SetVersion), arg0)
}

// SetVisibility mocks base method.
func (m *MockMetadata) SetVisibility(arg0 string) metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVisibility", arg0)
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// SetVisibility indicates an expected call of SetVisibility.
func (mr *MockMetadataMockRecorder) SetVisibility(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVisibility", reflect.TypeOf((*MockMetadata)(nil).SetVisibility), arg0)
}

// Tags mocks base method.
func (m *MockMetadata) Tags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockMetadataMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockMetadata)(nil).Tags))
}

// TagsNormalised mocks base method.
func (m *MockMetadata) TagsNormalised() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsNormalised")
	ret0, _ := ret[0].([]string)
	return ret0
}

// TagsNormalised indicates an expected call of TagsNormalised.
func (mr *MockMetadataMockRecorder) TagsNormalised() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsNormalised", reflect.TypeOf((*MockMetadata)(nil).TagsNormalised))
}
