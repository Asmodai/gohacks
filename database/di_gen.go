// Code generated by digen; DO NOT EDIT.

package database

import (
	"context"

	contextdi "github.com/Asmodai/gohacks/contextdi"
	errors "gitlab.com/tozd/go/errors"
)

// --- Manager ---

// Key used to store the instance in the context's user value.
const ContextKeyManager = "gohacks/database@v1"

// Signalled if the instance associated with the context key is not of
// type Manager.
var ErrValueNotManager = errors.Base("value is not Manager")

// Set Manager stores the instance in the context map.
func SetManager(ctx context.Context, inst Manager) (context.Context, error) {
	val, err := contextdi.PutToContext(ctx, ContextKeyManager, inst)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return val, nil
}

// Get the logger from the given context.
//
// Will return ErrValueNotManager if the value in the context is not of type
// Manager.
func GetManager(ctx context.Context) (Manager, error) {
	var zero Manager

	val, err := contextdi.GetFromContext(ctx, ContextKeyManager)
	if err != nil {
		return zero, errors.WithStack(err)
	}

	inst, ok := val.(Manager)
	if !ok {
		return zero, errors.WithStack(ErrValueNotManager)
	}

	return inst, nil
}

// Attempt to get the instance from the given context.  Panics if the
// operation fails.
func MustGetManager(ctx context.Context) Manager {
	inst, err := GetManager(ctx)

	if err != nil {
		panic(errors.WithMessage(err, "Manager missing in context"))
	}

	return inst
}

// TryGetManager returns the instance and true if present and typed.
func TryGetManager(ctx context.Context) (Manager, bool) {
	var zero Manager

	val, err := contextdi.GetFromContext(ctx, ContextKeyManager)
	if err != nil {
		return zero, false
	}

	inst, ok := val.(Manager)
	if !ok {
		return zero, false
	}

	return inst, true
}

// FromManager returns the instance or the fallback.
func FromManager(ctx context.Context) Manager {
	if v, ok := TryGetManager(ctx); ok {
		return v
	}

	return NewManager()
}

// WithManager calls fn with the instance or fallback.
func WithManager(ctx context.Context, fn func(Manager)) {
	fn(FromManager(ctx))
}

// SetManagerIfAbsent sets only if not already present.
func SetManagerIfAbsent(ctx context.Context, inst Manager) (context.Context, error) {
	if _, ok := TryGetManager(ctx); ok {
		return ctx, nil
	}

	return SetManager(ctx, inst)
}
