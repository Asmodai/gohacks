// Code generated by digen; DO NOT EDIT.

package logger

import (
	"context"
	"fmt"
	"reflect"
	"strings"
	"testing"
)

// --- Logger ---

func TestLoggerDI(t *testing.T) {
	t.Run("SetLogger", func(t *testing.T) {
		inst := NewDefaultLogger()
		_, err := SetLogger(context.Background(), inst)
		if err != nil {
			t.Fatalf("Unexpected error: %#v", err)
		}
	})

	t.Run("GetLogger", func(t *testing.T) {
		inst := NewDefaultLogger()
		ctx, err := SetLogger(context.Background(), inst)
		if err != nil {
			t.Fatalf("Unexpected error: %#v", err)
		}

		res, err := GetLogger(ctx)
		if err != nil {
			t.Fatalf("Unexpected error: %#v", err)
		}

		if res != inst {
			t.Errorf("Unexpected result: %#v ", res)
		}
	})

	t.Run("MustGetLogger", func(t *testing.T) {
		t.Run("Panic when missing", func(t *testing.T) {
			ctx := context.Background()
			panicMsg := "Logger missing in context"

			defer func() {
				if r := recover(); r == nil {
					t.Fatalf("expected panic, got none")
				} else {
					// Panic value is an error from
					// errors.WithMessage; check the text.
					msg := fmt.Sprint(r)
					if !strings.Contains(msg, panicMsg) {
						t.Fatalf("panic = %q, want %q",
							msg,
							panicMsg)
					}
				}
			}()

			_ = MustGetLogger(ctx) // should panic
		})

		t.Run("No panic when present", func(t *testing.T) {
			ctx, err := SetLogger(context.Background(), NewDefaultLogger())
			if err != nil {
				t.Fatalf("Unexpected error: %v", err)
			}

			defer func() {
				if r := recover(); r != nil {
					t.Fatalf("Unexpected panic: %v", r)
				}
			}()

			got := MustGetLogger(ctx)
			if got == nil {
				t.Fatal("Got nil instance")
			}
		})
	})

	t.Run("TryGetLogger", func(t *testing.T) {
		var zero Logger

		t.Run("Returns valid when present", func(t *testing.T) {
			ctx, err := SetLogger(context.Background(), NewDefaultLogger())
			if err != nil {
				t.Fatalf("Unexpected error: %v", err)
			}

			val, ok := TryGetLogger(ctx)

			if !ok {
				t.Error("Expected true")
			}

			if val == zero {
				t.Errorf("Expected value")
			}
		})

		t.Run("Returns zero when not present", func(t *testing.T) {
			val, ok := TryGetLogger(context.Background())

			if ok {
				t.Error("Expected false")
			}

			if val != zero {
				t.Errorf("Expected zero got %#v", val)
			}
		})
	})

	t.Run("FromLogger", func(t *testing.T) {
		rtype := reflect.TypeOf(NewDefaultLogger())

		t.Run("Returns instance when present", func(t *testing.T) {
			inst := NewDefaultLogger()

			ctx, err := SetLogger(context.Background(), inst)
			if err != nil {
				t.Fatalf("Unexpected error: %v", err)
			}

			val := FromLogger(ctx)
			if val != inst {
				t.Fatalf("Unexpected value: %#v", val)
			}
		})

		t.Run("Returns fallback when not present", func(t *testing.T) {
			val := FromLogger(context.Background())

			if reflect.TypeOf(val) != rtype {
				t.Fatalf("Unexpected value: %#v", val)
			}
		})
	})

	t.Run("WithLogger", func(t *testing.T) {
		rtype := reflect.TypeOf(NewDefaultLogger())

		t.Run("Returns instance when present", func(t *testing.T) {
			inst := NewDefaultLogger()

			ctx, err := SetLogger(context.Background(), inst)
			if err != nil {
				t.Fatalf("Unexpected error: %v", err)
			}

			WithLogger(ctx, func(obj Logger) {
				if obj != inst {
					t.Fatalf("Unexpected value: %#v", obj)
				}
			})
		})

		t.Run("Returns fallback when not present", func(t *testing.T) {
			WithLogger(context.Background(), func(obj Logger) {
				if reflect.TypeOf(obj) != rtype {
					t.Fatalf("Unexpected value: %#v", obj)
				}
			})
		})
	})
}
