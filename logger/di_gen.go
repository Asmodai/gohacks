// Code generated by digen; DO NOT EDIT.

package logger

import (
	"context"

	contextdi "github.com/Asmodai/gohacks/contextdi"
	errors "gitlab.com/tozd/go/errors"
)

// --- Logger ---

// Key used to store the instance in the context's user value.
const ContextKeyLogger = "gohacks/logger@v1"

// Signalled if the instance associated with the context key is not of
// type Logger.
var ErrValueNotLogger = errors.Base("value is not Logger")

// Set Logger stores the instance in the context map.
func SetLogger(ctx context.Context, inst Logger) (context.Context, error) {
	val, err := contextdi.PutToContext(ctx, ContextKeyLogger, inst)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return val, nil
}

// Get the logger from the given context.
//
// Will return ErrValueNotLogger if the value in the context is not of type
// Logger.
func GetLogger(ctx context.Context) (Logger, error) {
	var zero Logger

	val, err := contextdi.GetFromContext(ctx, ContextKeyLogger)
	if err != nil {
		return zero, errors.WithStack(err)
	}

	inst, ok := val.(Logger)
	if !ok {
		return zero, errors.WithStack(ErrValueNotLogger)
	}

	return inst, nil
}

// Attempt to get the instance from the given context.  Panics if the
// operation fails.
func MustGetLogger(ctx context.Context) Logger {
	inst, err := GetLogger(ctx)

	if err != nil {
		panic(errors.WithMessage(err, "Logger missing in context"))
	}

	return inst
}

// TryGetLogger returns the instance and true if present and typed.
func TryGetLogger(ctx context.Context) (Logger, bool) {
	var zero Logger

	val, err := contextdi.GetFromContext(ctx, ContextKeyLogger)
	if err != nil {
		return zero, false
	}

	inst, ok := val.(Logger)
	if !ok {
		return zero, false
	}

	return inst, true
}

// FromLogger returns the instance or the fallback.
func FromLogger(ctx context.Context) Logger {
	if v, ok := TryGetLogger(ctx); ok {
		return v
	}

	return NewDefaultLogger()
}

// WithLogger calls fn with the instance or fallback.
func WithLogger(ctx context.Context, fn func(Logger)) {
	fn(FromLogger(ctx))
}

// SetLoggerIfAbsent sets only if not already present.
func SetLoggerIfAbsent(ctx context.Context, inst Logger) (context.Context, error) {
	if _, ok := TryGetLogger(ctx); ok {
		return ctx, nil
	}

	return SetLogger(ctx, inst)
}
