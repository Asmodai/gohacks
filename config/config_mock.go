// Code generated by MockGen. DO NOT EDIT.
// Source: ./config/config.go
// +build testing
//
// Generated by this command:
//
//	mockgen -package=config -source=./config/config.go -destination=config/config_mock.go
//

// Package config is a generated GoMock package.
package config

import (
	flag "flag"
	reflect "reflect"

	semver "github.com/Asmodai/gohacks/semver"
	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// AddBoolFlag mocks base method.
func (m *MockConfig) AddBoolFlag(p *bool, name string, value bool, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBoolFlag", p, name, value, usage)
}

// AddBoolFlag indicates an expected call of AddBoolFlag.
func (mr *MockConfigMockRecorder) AddBoolFlag(p, name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBoolFlag", reflect.TypeOf((*MockConfig)(nil).AddBoolFlag), p, name, value, usage)
}

// AddFloat64Flag mocks base method.
func (m *MockConfig) AddFloat64Flag(p *float64, name string, value float64, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFloat64Flag", p, name, value, usage)
}

// AddFloat64Flag indicates an expected call of AddFloat64Flag.
func (mr *MockConfigMockRecorder) AddFloat64Flag(p, name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloat64Flag", reflect.TypeOf((*MockConfig)(nil).AddFloat64Flag), p, name, value, usage)
}

// AddInt64Flag mocks base method.
func (m *MockConfig) AddInt64Flag(p *int64, name string, value int64, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt64Flag", p, name, value, usage)
}

// AddInt64Flag indicates an expected call of AddInt64Flag.
func (mr *MockConfigMockRecorder) AddInt64Flag(p, name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt64Flag", reflect.TypeOf((*MockConfig)(nil).AddInt64Flag), p, name, value, usage)
}

// AddIntFlag mocks base method.
func (m *MockConfig) AddIntFlag(p *int, name string, value int, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIntFlag", p, name, value, usage)
}

// AddIntFlag indicates an expected call of AddIntFlag.
func (mr *MockConfigMockRecorder) AddIntFlag(p, name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIntFlag", reflect.TypeOf((*MockConfig)(nil).AddIntFlag), p, name, value, usage)
}

// AddStringFlag mocks base method.
func (m *MockConfig) AddStringFlag(p *string, name, value, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStringFlag", p, name, value, usage)
}

// AddStringFlag indicates an expected call of AddStringFlag.
func (mr *MockConfigMockRecorder) AddStringFlag(p, name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStringFlag", reflect.TypeOf((*MockConfig)(nil).AddStringFlag), p, name, value, usage)
}

// AddUint64Flag mocks base method.
func (m *MockConfig) AddUint64Flag(p *uint64, name string, value uint64, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint64Flag", p, name, value, usage)
}

// AddUint64Flag indicates an expected call of AddUint64Flag.
func (mr *MockConfigMockRecorder) AddUint64Flag(p, name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint64Flag", reflect.TypeOf((*MockConfig)(nil).AddUint64Flag), p, name, value, usage)
}

// AddUintFlag mocks base method.
func (m *MockConfig) AddUintFlag(p *uint, name string, value uint, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUintFlag", p, name, value, usage)
}

// AddUintFlag indicates an expected call of AddUintFlag.
func (mr *MockConfigMockRecorder) AddUintFlag(p, name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUintFlag", reflect.TypeOf((*MockConfig)(nil).AddUintFlag), p, name, value, usage)
}

// AddValidator mocks base method.
func (m *MockConfig) AddValidator(name string, fn any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddValidator", name, fn)
}

// AddValidator indicates an expected call of AddValidator.
func (mr *MockConfigMockRecorder) AddValidator(name, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValidator", reflect.TypeOf((*MockConfig)(nil).AddValidator), name, fn)
}

// ConfFile mocks base method.
func (m *MockConfig) ConfFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfFile indicates an expected call of ConfFile.
func (mr *MockConfigMockRecorder) ConfFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfFile", reflect.TypeOf((*MockConfig)(nil).ConfFile))
}

// IsDebug mocks base method.
func (m *MockConfig) IsDebug() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDebug")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDebug indicates an expected call of IsDebug.
func (mr *MockConfigMockRecorder) IsDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDebug", reflect.TypeOf((*MockConfig)(nil).IsDebug))
}

// LogFile mocks base method.
func (m *MockConfig) LogFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// LogFile indicates an expected call of LogFile.
func (mr *MockConfigMockRecorder) LogFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFile", reflect.TypeOf((*MockConfig)(nil).LogFile))
}

// LookupFlag mocks base method.
func (m *MockConfig) LookupFlag(name string) *flag.Flag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupFlag", name)
	ret0, _ := ret[0].(*flag.Flag)
	return ret0
}

// LookupFlag indicates an expected call of LookupFlag.
func (mr *MockConfigMockRecorder) LookupFlag(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupFlag", reflect.TypeOf((*MockConfig)(nil).LookupFlag), name)
}

// Name mocks base method.
func (m *MockConfig) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConfigMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConfig)(nil).Name))
}

// Parse mocks base method.
func (m *MockConfig) Parse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Parse")
}

// Parse indicates an expected call of Parse.
func (mr *MockConfigMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockConfig)(nil).Parse))
}

// String mocks base method.
func (m *MockConfig) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockConfigMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockConfig)(nil).String))
}

// Validate mocks base method.
func (m *MockConfig) Validate() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockConfigMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockConfig)(nil).Validate))
}

// Version mocks base method.
func (m *MockConfig) Version() *semver.SemVer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*semver.SemVer)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockConfigMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockConfig)(nil).Version))
}
