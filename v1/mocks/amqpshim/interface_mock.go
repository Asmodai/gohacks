// Code generated by MockGen. DO NOT EDIT.
// Source: ./amqp/amqpshim/interface.go
//
// Generated by this command:
//
//	mockgen -package=amqpshim -source=./amqp/amqpshim/interface.go -destination=mocks/amqpshim/interface_mock.go
//

// Package amqpshim is a generated GoMock package.
package amqpshim

import (
	context "context"
	tls "crypto/tls"
	net "net"
	reflect "reflect"
	time "time"

	amqpshim "github.com/Asmodai/gohacks/v1/amqp/amqpshim"
	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockConnection) Channel() (amqpshim.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(amqpshim.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockConnectionMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockConnection)(nil).Channel))
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// CloseDeadline mocks base method.
func (m *MockConnection) CloseDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseDeadline indicates an expected call of CloseDeadline.
func (mr *MockConnectionMockRecorder) CloseDeadline(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDeadline", reflect.TypeOf((*MockConnection)(nil).CloseDeadline), arg0)
}

// ConnectionState mocks base method.
func (m *MockConnection) ConnectionState() tls.ConnectionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionState")
	ret0, _ := ret[0].(tls.ConnectionState)
	return ret0
}

// ConnectionState indicates an expected call of ConnectionState.
func (mr *MockConnectionMockRecorder) ConnectionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionState", reflect.TypeOf((*MockConnection)(nil).ConnectionState))
}

// IsClosed mocks base method.
func (m *MockConnection) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockConnectionMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConnection)(nil).IsClosed))
}

// LocalAddr mocks base method.
func (m *MockConnection) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnectionMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConnection)(nil).LocalAddr))
}

// NotifyBlocked mocks base method.
func (m *MockConnection) NotifyBlocked(arg0 chan amqp091.Blocking) chan amqp091.Blocking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyBlocked", arg0)
	ret0, _ := ret[0].(chan amqp091.Blocking)
	return ret0
}

// NotifyBlocked indicates an expected call of NotifyBlocked.
func (mr *MockConnectionMockRecorder) NotifyBlocked(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyBlocked", reflect.TypeOf((*MockConnection)(nil).NotifyBlocked), arg0)
}

// NotifyClose mocks base method.
func (m *MockConnection) NotifyClose(arg0 chan *amqp091.Error) chan *amqp091.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyClose", arg0)
	ret0, _ := ret[0].(chan *amqp091.Error)
	return ret0
}

// NotifyClose indicates an expected call of NotifyClose.
func (mr *MockConnectionMockRecorder) NotifyClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyClose", reflect.TypeOf((*MockConnection)(nil).NotifyClose), arg0)
}

// RemoteAddr mocks base method.
func (m *MockConnection) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnectionMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConnection)(nil).RemoteAddr))
}

// UpdateSecret mocks base method.
func (m *MockConnection) UpdateSecret(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockConnectionMockRecorder) UpdateSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockConnection)(nil).UpdateSecret), arg0, arg1)
}

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
	isgomock struct{}
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockChannel) Ack(tag uint64, multiple bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", tag, multiple)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockChannelMockRecorder) Ack(tag, multiple any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockChannel)(nil).Ack), tag, multiple)
}

// Cancel mocks base method.
func (m *MockChannel) Cancel(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockChannelMockRecorder) Cancel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockChannel)(nil).Cancel), arg0, arg1)
}

// Close mocks base method.
func (m *MockChannel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChannelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChannel)(nil).Close))
}

// Confirm mocks base method.
func (m *MockChannel) Confirm(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockChannelMockRecorder) Confirm(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockChannel)(nil).Confirm), arg0)
}

// Consume mocks base method.
func (m *MockChannel) Consume(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp091.Table) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockChannelMockRecorder) Consume(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockChannel)(nil).Consume), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ConsumeWithContext mocks base method.
func (m *MockChannel) ConsumeWithContext(arg0 context.Context, arg1, arg2 string, arg3, arg4, arg5, arg6 bool, arg7 amqp091.Table) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeWithContext", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeWithContext indicates an expected call of ConsumeWithContext.
func (mr *MockChannelMockRecorder) ConsumeWithContext(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeWithContext", reflect.TypeOf((*MockChannel)(nil).ConsumeWithContext), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ExchangeBind mocks base method.
func (m *MockChannel) ExchangeBind(arg0, arg1, arg2 string, arg3 bool, arg4 amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeBind", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeBind indicates an expected call of ExchangeBind.
func (mr *MockChannelMockRecorder) ExchangeBind(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeBind", reflect.TypeOf((*MockChannel)(nil).ExchangeBind), arg0, arg1, arg2, arg3, arg4)
}

// ExchangeDeclare mocks base method.
func (m *MockChannel) ExchangeDeclare(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockChannelMockRecorder) ExchangeDeclare(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockChannel)(nil).ExchangeDeclare), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ExchangeDeclarePassive mocks base method.
func (m *MockChannel) ExchangeDeclarePassive(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclarePassive", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclarePassive indicates an expected call of ExchangeDeclarePassive.
func (mr *MockChannelMockRecorder) ExchangeDeclarePassive(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclarePassive", reflect.TypeOf((*MockChannel)(nil).ExchangeDeclarePassive), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ExchangeDelete mocks base method.
func (m *MockChannel) ExchangeDelete(arg0 string, arg1, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDelete indicates an expected call of ExchangeDelete.
func (mr *MockChannelMockRecorder) ExchangeDelete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDelete", reflect.TypeOf((*MockChannel)(nil).ExchangeDelete), arg0, arg1, arg2)
}

// ExchangeUnbind mocks base method.
func (m *MockChannel) ExchangeUnbind(arg0, arg1, arg2 string, arg3 bool, arg4 amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeUnbind", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeUnbind indicates an expected call of ExchangeUnbind.
func (mr *MockChannelMockRecorder) ExchangeUnbind(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeUnbind", reflect.TypeOf((*MockChannel)(nil).ExchangeUnbind), arg0, arg1, arg2, arg3, arg4)
}

// Flow mocks base method.
func (m *MockChannel) Flow(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flow indicates an expected call of Flow.
func (mr *MockChannelMockRecorder) Flow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flow", reflect.TypeOf((*MockChannel)(nil).Flow), arg0)
}

// Get mocks base method.
func (m *MockChannel) Get(arg0 string, arg1 bool) (amqp091.Delivery, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(amqp091.Delivery)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockChannelMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChannel)(nil).Get), arg0, arg1)
}

// GetNextPublishSeqNo mocks base method.
func (m *MockChannel) GetNextPublishSeqNo() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextPublishSeqNo")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNextPublishSeqNo indicates an expected call of GetNextPublishSeqNo.
func (mr *MockChannelMockRecorder) GetNextPublishSeqNo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextPublishSeqNo", reflect.TypeOf((*MockChannel)(nil).GetNextPublishSeqNo))
}

// IsClosed mocks base method.
func (m *MockChannel) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockChannelMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockChannel)(nil).IsClosed))
}

// Nack mocks base method.
func (m *MockChannel) Nack(arg0 uint64, arg1, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nack", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockChannelMockRecorder) Nack(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockChannel)(nil).Nack), arg0, arg1, arg2)
}

// NotifyCancel mocks base method.
func (m *MockChannel) NotifyCancel(arg0 chan string) chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCancel", arg0)
	ret0, _ := ret[0].(chan string)
	return ret0
}

// NotifyCancel indicates an expected call of NotifyCancel.
func (mr *MockChannelMockRecorder) NotifyCancel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCancel", reflect.TypeOf((*MockChannel)(nil).NotifyCancel), arg0)
}

// NotifyClose mocks base method.
func (m *MockChannel) NotifyClose(arg0 chan *amqp091.Error) chan *amqp091.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyClose", arg0)
	ret0, _ := ret[0].(chan *amqp091.Error)
	return ret0
}

// NotifyClose indicates an expected call of NotifyClose.
func (mr *MockChannelMockRecorder) NotifyClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyClose", reflect.TypeOf((*MockChannel)(nil).NotifyClose), arg0)
}

// NotifyConfirm mocks base method.
func (m *MockChannel) NotifyConfirm(arg0, arg1 chan uint64) (chan uint64, chan uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyConfirm", arg0, arg1)
	ret0, _ := ret[0].(chan uint64)
	ret1, _ := ret[1].(chan uint64)
	return ret0, ret1
}

// NotifyConfirm indicates an expected call of NotifyConfirm.
func (mr *MockChannelMockRecorder) NotifyConfirm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyConfirm", reflect.TypeOf((*MockChannel)(nil).NotifyConfirm), arg0, arg1)
}

// NotifyFlow mocks base method.
func (m *MockChannel) NotifyFlow(arg0 chan bool) chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyFlow", arg0)
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// NotifyFlow indicates an expected call of NotifyFlow.
func (mr *MockChannelMockRecorder) NotifyFlow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyFlow", reflect.TypeOf((*MockChannel)(nil).NotifyFlow), arg0)
}

// NotifyPublish mocks base method.
func (m *MockChannel) NotifyPublish(arg0 chan amqp091.Confirmation) chan amqp091.Confirmation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyPublish", arg0)
	ret0, _ := ret[0].(chan amqp091.Confirmation)
	return ret0
}

// NotifyPublish indicates an expected call of NotifyPublish.
func (mr *MockChannelMockRecorder) NotifyPublish(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPublish", reflect.TypeOf((*MockChannel)(nil).NotifyPublish), arg0)
}

// NotifyReturn mocks base method.
func (m *MockChannel) NotifyReturn(arg0 chan amqp091.Return) chan amqp091.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyReturn", arg0)
	ret0, _ := ret[0].(chan amqp091.Return)
	return ret0
}

// NotifyReturn indicates an expected call of NotifyReturn.
func (mr *MockChannelMockRecorder) NotifyReturn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyReturn", reflect.TypeOf((*MockChannel)(nil).NotifyReturn), arg0)
}

// Publish mocks base method.
func (m *MockChannel) Publish(arg0, arg1 string, arg2, arg3 bool, arg4 amqp091.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockChannelMockRecorder) Publish(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockChannel)(nil).Publish), arg0, arg1, arg2, arg3, arg4)
}

// PublishWithContext mocks base method.
func (m *MockChannel) PublishWithContext(arg0 context.Context, arg1, arg2 string, arg3, arg4 bool, arg5 amqp091.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithContext", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockChannelMockRecorder) PublishWithContext(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockChannel)(nil).PublishWithContext), arg0, arg1, arg2, arg3, arg4, arg5)
}

// PublishWithDeferredConfirm mocks base method.
func (m *MockChannel) PublishWithDeferredConfirm(arg0, arg1 string, arg2, arg3 bool, arg4 amqp091.Publishing) (*amqp091.DeferredConfirmation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithDeferredConfirm", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*amqp091.DeferredConfirmation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishWithDeferredConfirm indicates an expected call of PublishWithDeferredConfirm.
func (mr *MockChannelMockRecorder) PublishWithDeferredConfirm(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithDeferredConfirm", reflect.TypeOf((*MockChannel)(nil).PublishWithDeferredConfirm), arg0, arg1, arg2, arg3, arg4)
}

// PublishWithDeferredConfirmWithContext mocks base method.
func (m *MockChannel) PublishWithDeferredConfirmWithContext(arg0 context.Context, arg1, arg2 string, arg3, arg4 bool, arg5 amqp091.Publishing) (*amqp091.DeferredConfirmation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithDeferredConfirmWithContext", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*amqp091.DeferredConfirmation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishWithDeferredConfirmWithContext indicates an expected call of PublishWithDeferredConfirmWithContext.
func (mr *MockChannelMockRecorder) PublishWithDeferredConfirmWithContext(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithDeferredConfirmWithContext", reflect.TypeOf((*MockChannel)(nil).PublishWithDeferredConfirmWithContext), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Qos mocks base method.
func (m *MockChannel) Qos(arg0, arg1 int, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qos", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Qos indicates an expected call of Qos.
func (mr *MockChannelMockRecorder) Qos(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qos", reflect.TypeOf((*MockChannel)(nil).Qos), arg0, arg1, arg2)
}

// QueueBind mocks base method.
func (m *MockChannel) QueueBind(arg0, arg1, arg2 string, arg3 bool, arg4 amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind.
func (mr *MockChannelMockRecorder) QueueBind(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockChannel)(nil).QueueBind), arg0, arg1, arg2, arg3, arg4)
}

// QueueDeclare mocks base method.
func (m *MockChannel) QueueDeclare(arg0 string, arg1, arg2, arg3, arg4 bool, arg5 amqp091.Table) (amqp091.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(amqp091.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare.
func (mr *MockChannelMockRecorder) QueueDeclare(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockChannel)(nil).QueueDeclare), arg0, arg1, arg2, arg3, arg4, arg5)
}

// QueueDeclarePassive mocks base method.
func (m *MockChannel) QueueDeclarePassive(arg0 string, arg1, arg2, arg3, arg4 bool, arg5 amqp091.Table) (amqp091.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclarePassive", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(amqp091.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclarePassive indicates an expected call of QueueDeclarePassive.
func (mr *MockChannelMockRecorder) QueueDeclarePassive(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclarePassive", reflect.TypeOf((*MockChannel)(nil).QueueDeclarePassive), arg0, arg1, arg2, arg3, arg4, arg5)
}

// QueueDelete mocks base method.
func (m *MockChannel) QueueDelete(arg0 string, arg1, arg2, arg3 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDelete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDelete indicates an expected call of QueueDelete.
func (mr *MockChannelMockRecorder) QueueDelete(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDelete", reflect.TypeOf((*MockChannel)(nil).QueueDelete), arg0, arg1, arg2, arg3)
}

// QueuePurge mocks base method.
func (m *MockChannel) QueuePurge(arg0 string, arg1 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuePurge", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuePurge indicates an expected call of QueuePurge.
func (mr *MockChannelMockRecorder) QueuePurge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuePurge", reflect.TypeOf((*MockChannel)(nil).QueuePurge), arg0, arg1)
}

// QueueUnbind mocks base method.
func (m *MockChannel) QueueUnbind(arg0, arg1, arg2 string, arg3 amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueUnbind", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueUnbind indicates an expected call of QueueUnbind.
func (mr *MockChannelMockRecorder) QueueUnbind(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueUnbind", reflect.TypeOf((*MockChannel)(nil).QueueUnbind), arg0, arg1, arg2, arg3)
}

// Reject mocks base method.
func (m *MockChannel) Reject(arg0 uint64, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *MockChannelMockRecorder) Reject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockChannel)(nil).Reject), arg0, arg1)
}

// Tx mocks base method.
func (m *MockChannel) Tx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockChannelMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockChannel)(nil).Tx))
}

// TxCommit mocks base method.
func (m *MockChannel) TxCommit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCommit")
	ret0, _ := ret[0].(error)
	return ret0
}

// TxCommit indicates an expected call of TxCommit.
func (mr *MockChannelMockRecorder) TxCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCommit", reflect.TypeOf((*MockChannel)(nil).TxCommit))
}

// TxRollback mocks base method.
func (m *MockChannel) TxRollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxRollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// TxRollback indicates an expected call of TxRollback.
func (mr *MockChannelMockRecorder) TxRollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxRollback", reflect.TypeOf((*MockChannel)(nil).TxRollback))
}
