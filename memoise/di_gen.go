// Code generated by digen; DO NOT EDIT.

package memoise

import (
	"context"

	contextdi "github.com/Asmodai/gohacks/contextdi"
	errors "gitlab.com/tozd/go/errors"
)

// --- Memoise ---

// Key used to store the instance in the context's user value.
const ContextKeyMemoise = "gohacks/memoise@v1"

// Signalled if the instance associated with the context key is not of
// type Memoise.
var ErrValueNotMemoise = errors.Base("value is not Memoise")

// Set Memoise stores the instance in the context map.
func SetMemoise(ctx context.Context, inst Memoise) (context.Context, error) {
	val, err := contextdi.PutToContext(ctx, ContextKeyMemoise, inst)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return val, nil
}

// Get the logger from the given context.
//
// Will return ErrValueNotMemoise if the value in the context is not of type
// Memoise.
func GetMemoise(ctx context.Context) (Memoise, error) {
	var zero Memoise

	val, err := contextdi.GetFromContext(ctx, ContextKeyMemoise)
	if err != nil {
		return zero, errors.WithStack(err)
	}

	inst, ok := val.(Memoise)
	if !ok {
		return zero, errors.WithStack(ErrValueNotMemoise)
	}

	return inst, nil
}

// Attempt to get the instance from the given context.  Panics if the
// operation fails.
func MustGetMemoise(ctx context.Context) Memoise {
	inst, err := GetMemoise(ctx)

	if err != nil {
		panic(errors.WithMessage(err, "Memoise missing in context"))
	}

	return inst
}

// TryGetMemoise returns the instance and true if present and typed.
func TryGetMemoise(ctx context.Context) (Memoise, bool) {
	var zero Memoise

	val, err := contextdi.GetFromContext(ctx, ContextKeyMemoise)
	if err != nil {
		return zero, false
	}

	inst, ok := val.(Memoise)
	if !ok {
		return zero, false
	}

	return inst, true
}

// FromMemoise returns the instance or the fallback.
func FromMemoise(ctx context.Context) Memoise {
	if v, ok := TryGetMemoise(ctx); ok {
		return v
	}

	return NewDefaultMemoise()
}

// WithMemoise calls fn with the instance or fallback.
func WithMemoise(ctx context.Context, fn func(Memoise)) {
	fn(FromMemoise(ctx))
}

// SetMemoiseIfAbsent sets only if not already present.
func SetMemoiseIfAbsent(ctx context.Context, inst Memoise) (context.Context, error) {
	if _, ok := TryGetMemoise(ctx); ok {
		return ctx, nil
	}

	return SetMemoise(ctx, inst)
}
